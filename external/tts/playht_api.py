"""
external/tts/playht_api.py

This module provides an interface to interact with an external Text-to-Speech (TTS)
API to convert text into speech. It defines a set of classes and exceptions to handle
the audio generation and retrieval process.

Author:
    Yi-Ting Li (yitingli.public@gmail.com)

Classes:
    - AudioItem: A data class representing an audio item generated by the TTS API.
    - TextToSpeechConverter: A class that contains methods to communicate with the TTS API.

Exceptions:
    - AudioUrlListLengthError: Raised when the audio URL list length is more than 1.
    - AudioGenerationFailed: Raised when the audio generation fails.

References:
    - https://docs.play.ht/reference/api-convert-tts-standard-premium-voices
    - https://docs.play.ht/reference/api-get-standard-premium-voices-article-conversion-status
"""

import json
import os
import time
from typing import Optional

import requests
from loguru import logger

from external.tts._base_tts import (
    AudioGenerationFailed,
    AudioUrlListLengthError,
    BaseTTS,
)


class PlayHtTTS(BaseTTS):
    def __init__(
        self,
        api_url: Optional[str],
        secret_key: Optional[str],
        user_id: Optional[str],
        download_wav_url: Optional[str],
    ):
        """
        Initialize a TextToSpeechConverter instance.

        Parameters:
            api_url (Optional[str]): The URL of the TTS API.
            secret_key (Optional[str]): The secret key used to authenticate with the TTS API.
            user_id (Optional[str]): The user ID used to authenticate with the TTS API.
            download_wav_url (Optional[str]): The URL used to download the generated audio.
        """
        self.secret_key = secret_key or os.getenv("PLAYHT_SECRET_KEY")
        self.user_id = user_id or os.getenv("PLAYHT_USER_ID")
        self.api_url = api_url or os.getenv("PLAYHT_API_URL")
        self.download_wav_url = download_wav_url or os.getenv("PLAYHT_DOWNLOAD_WAV_URL")
        self.headers = {
            "accept": "application/json",
            "content-type": "application/json",
            "AUTHORIZATION": self.secret_key,
            "X-USER-ID": self.user_id,
        }

    def text_to_speech(
        self, text: str, voice: str = "Oliver", speed: str = "120"
    ) -> bytes:
        """
        Convert text to speech by sending a request to the external TTS API.

        Parameters:
            text (str): The text that needs to be converted to speech.
            voice (str): The voice used for the speech generation. Defaults to "Oliver".
            speed (str): The speed of the speech. Defaults to "120".

        Returns:
            AudioItem: An instance of AudioItem representing the generated audio.

        Raises:
            AudioUrlListLengthError: If the audio URL list length is more than 1.
            AudioGenerationFailed: If the audio generation fails after multiple attempts.
        """
        payload = {
            "content": [text],
            "voice": voice,
            "globalSpeed": speed,
        }

        # Send the request
        logger.info(f"Generating audio by {self.api_url}")
        response = requests.post(
            self.api_url, json=payload, headers=self.headers
        ).json()
        download_url = self.download_wav_url.format(
            transcriptionId=response["transcriptionId"]
        )

        # Wait for the audio to be ready
        for _ in range(50):
            doc = requests.get(download_url, headers=self.headers)

            # If the audio is not ready, wait for 0.1 seconds and try again
            if doc.status_code != 200:
                time.sleep(0.1)
                continue

            content = json.loads(doc.content)

            if content["transcriped"]:
                logger.info(f"Downloaded audio from {download_url}")

                if len(content["audioUrl"]) > 1:
                    raise AudioUrlListLengthError(
                        "Audio url list length is more than 1"
                    )

                return requests.get(content["audioUrl"][0]).content

        raise AudioGenerationFailed("Audio generation failed")
